Writing nowadays tools in GO

Olivier Wulveryck
Geek
Techsys
@owulveryck
o.wulveryck@techsys.fr

* Acknowledgement

The begining of this presentation is heavily inspired by a talk from Sameer Ajmani (manager of the go team) presented at the [[http://applicative.acm.org/][ACM Applicative]] conference in New York City on June 1, 2016.

.link https://www.youtube.com/watch?v=5bYO60-qYOI Watch the talk on YouTube

* Outline

_Explore,_Play..._and_Create_

1. *explore* What is Go, and who uses it?
2. *explore* Comparing Go and other languages 
3. *play* coding a tool
4. *create*...

.image img/paint-591564_960_720.png _ 400

* What is Go?

"Go is an open source programming language that makes it easy to build simple, reliable, and efficient software."

.link http://golang.org

.image img/usergroups.png

.caption _Gopher_ by [[http://www.reneefrench.com][Ren√©e French]]

* Why Go? Why me? 

I needed another language for problems shell scripts cannot simply solve.

- modern (calling network services, interacting with API, json etc.)
- few dependencies to carry my tools over 100s of servers
- simple to learn as I was not a developper
- concurrent but easy to read and maintain 

.image img/simplicity.jpg _ 400

* Who uses Go besides Google?

.link http://golang.org/wiki/GoUsers

Bitbucket, Booking.com, Core OS, Datadog, Digital Ocean, Docker, Dropbox, Facebook, Getty Images, GitHub, GOV.UK, Heroku, IBM, Intel, InfluxDB, Kubernetes, MongoDB, Mozilla services, Netflix, New York Times, SoundCloud, Tumblr, Twitter, Uber, VMWare ...

.image img/emc_gournal.jpg _ 400

* Comparing Go and other languages

"Go: 90% Perfect, 100% of the time" - bradfitz, 2014

.image https://talks.golang.org/2014/gocon-tokyo/funfast.svg _ 800

# Brad Fitzpatrick, GoCon Tokyo, May 2014

* Go differs from other "popular" languages

Fast, efficient for computers:

- Programs compile to machine code.  There's no VM.
- Control over memory layout, fewer indirections

Fun, fast for humans:

- Simple, concise syntax
- *Statically* linked *binaries*
- Built-in strings (UTF-8)
- Built-in generic maps and arrays/slices
- Built-in concurrency
- Easy *cross-compilation*

* Why does Go leave out some "modern" features?

In go there is no `classes`, `inheritance`, `constructor`, `final`, `exceptions`,...

Clarity is critical.

When reading code, it should be clear what the program will do.

When writing code, it should be clear how to make the program do what you want.

Sometimes this means writing out a loop instead of invoking an obscure function.

For more background on design:

- [[http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html][Less is exponentially more (Pike, 2012)]]
- [[http://talks.golang.org/2012/splash.article][Go at Google: Language Design in the Service of Software Engineering (Pike, 2012)]]

* Let's play

.image img/baracktocat.jpg _ 400

* Hello World!

.play -edit sources/hello/hello.go

* Setting the environment up

Downloading a go distribution ([[https://golang.org/dl/]]) and extract it somewhere

 export GOROOT=/path/to/projects
 export GOPATH=/path/to/go/tree

try the hello world:

 go get -v github.com/techsysfr/labtechgo/sources/hello
 cd $GOPROJECTS/src/github.com/techsysfr/labtechgo/sources/hello
 
 go run hello.go
 go build hello.go
 GOOS=windows go build hello.go

* A real life example

Getting the total and the free memory on a system.

.caption Telling a programmer there's already a library to do X is like telling a songwriter there's already a song about love - Pete Cordell

Different steps:

- step 1: simply displaying it on `stdout`
- step 2: display it in a loop
- step 3: defining a function
- step 4: acting as a server (http)
- step 5: going the API way and use JSON
- step 6: vieiwing the results

#################################################################
########################## STEP 1 ###############################
#################################################################
* Step 1: Getting the data

More than one way to do it:

- via `/proc/meminfo`
- via an `exec` to `vmstat`
- via a call to `free`
- ...

A lot of fork, how about efficiency?

* A better way
- using the a syscall 
 $ man 2 sysinfo
 SYSINFO(2)                                                               Linux Programmer's Manual                                                              SYSINFO(2)
 
 NAME
       sysinfo - returns information on overall system statistics
 ...
- [[https://golang.org/pkg/syscall/]]
.code sources/memcheck/1_main.go /START_IMPORT OMIT/,/END_IMPORT OMIT/ 

* Getting the information from the structure

Emitting the syscall and store it in the value

.code sources/memcheck/1_main.go /START_STRUCT OMIT/,/END_STRUCT OMIT/ 

And display it

.code sources/memcheck/1_main.go /START_DISPLAY OMIT/,/END_DISPLAY OMIT/ 

* About error checking

No exception, but an error object may be returned

.code sources/memcheck/1_main.go /START_ERROR OMIT/,/END_ERROR OMIT/ 

* The full code

.play -edit -numbers sources/memcheck/1_main.go 

#################################################################
########################## STEP 2 ###############################
#################################################################
* Step 2: looping

.play sources/memcheck/2_loop.go /START_LOOP OMIT/,/END_LOOP OMIT/ 

and of course, don't forget to include the time library

.code sources/memcheck/2_loop.go /START_IMPORT/,/END_IMPORT/

#################################################################
########################## STEP 3 ###############################
#################################################################
* Step 3: functions

.play -edit -numbers sources/memcheck/3_functions.go /START_FUNC/,/END_FUNC/

#################################################################
########################## STEP 4 ###############################
#################################################################
* Step 4: Serving the world!

Go has go a very complete and concurrent network http package `net/http`
Therefore it's easy to setup a web servers

.code -numbers sources/simpleweb/main.go

* Our function as a handler...

godoc net/http

  58     ListenAndServe starts an HTTP server with a given address and handler.
  59     The handler is usually nil, which means to use DefaultServeMux. Handle
  60     and HandleFunc add handlers to DefaultServeMux:
  61 
  62         http.Handle("/foo", fooHandler)
  63 
  64         http.HandleFunc("/bar", func(w http.ResponseWriter, r *http.Request) {                                                                                            
  65                 fmt.Fprintf(w, "Hello, %q", html.EscapeString(r.URL.Path))
  66         })
  67 
  68         log.Fatal(http.ListenAndServe(":8080", nil))

* getMem as a handler

getMem should act as a handler for our webserver.
So we must change the signature

.code sources/memcheck/4_server.go /START_SIGNATURE/,/END_SIGNATURE/

when we write to `w` we won't write to stdout anymore, but to the webstream

.code sources/memcheck/4_server.go /START_WRITE/,/END_WRITE/ HLw

* Main as a server

.play -edit sources/memcheck/4_server.go /START_HTTP/,/END_HTTP/

#################################################################
########################## STEP 5 ###############################
#################################################################
* Step 5: Webservice ? JSON ?

.code sources/memcheck/5_json.go /START_IMPORT/,/END_IMPORT/

[[https://gobyexample.com/json]] just copy/paste the example...
.code sources/memcheck/5_json.go /START_DISPLAY/,/END_DISPLAY/

